/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lenzhoundgui;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowFocusListener;
import javax.swing.JOptionPane;

/**
 *
 * @author Thayer
 */
public class TimeLapse extends javax.swing.JFrame {

    /**
     * Creates new form TimeLapse
     */
    public TimeLapse() {
        initComponents();
        setLookAndFeel();
        setUpListeners();
        setLocationRelativeTo(null);
    }

    public void setCamera(CameraSettings cameraIn){
        boolean firstSelected = false;
        timeLapseCamera = cameraIn;
        int[] savedPosArr = timeLapseCamera.getSavedPositions();
        for(int i = 0; i < savedPosArr.length; i++){
            if(savedPosArr[i] != CameraSettings.UNSET_SAVED_POSITION){
                if(firstSelected){
                    targetPositionComboBox.setSelectedIndex(i);
                    return;
                }
                else{
                    startingPositionComboBox.setSelectedIndex(i);
                    firstSelected = true;
                }
            }
        }
        //only reaches here if there arn't 2 valid positions
        this.hide();
        JOptionPane.showMessageDialog(null,
                    "There were no valid saved positions to"+
                    " create timelapse settings from.",
                    "Alert", JOptionPane.ERROR_MESSAGE);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        durationTextField = new javax.swing.JFormattedTextField();
        accelTimeTextField = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        acceptButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        startingPositionComboBox = new javax.swing.JComboBox();
        targetPositionComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        durationTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        durationTextField.setText("0");

        accelTimeTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        accelTimeTextField.setText("0");

        jLabel3.setText("Total duration of move(in seconds):");

        jLabel4.setText("Acceleration Time(in seconds:)");

        setTitle("Lenzhound Timelapse Manager");
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);

        acceptButton.setText("Accept");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        startingPositionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        targetPositionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        jLabel1.setText("To:");

        jLabel2.setText("From position:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Enter parameters:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(startingPositionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addComponent(targetPositionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(acceptButton)
                .addGap(41, 41, 41)
                .addComponent(cancelButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(targetPositionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(startingPositionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        Thread t = new Thread(() -> {
            double totalDuration = 0;
            double cycleDuration;
            double cycleRampTime;
            int position1;
            int position2;
            int stepsToTravel = 0;
            LenzLogger.log("Starting new timelapse calculation.");
            try{          
                position1 = timeLapseCamera.getSavedPositions()[startingPositionComboBox.getSelectedIndex()];
                position2 = timeLapseCamera.getSavedPositions()[targetPositionComboBox.getSelectedIndex()];
                LenzLogger.log("Pos1: " + position1 + " Pos2: " + position2);
                if(position1!=position2){
                    stepsToTravel = Math.abs(position2 - position1);
                    stepsToTravel = stepsToTravel<<BITSHIFT_CONSTANT;
                }
                else
                    throw new Exception("Either the same saved positions was selected "
                                       +"as the starting\n and target point or both "
                                       +"saved positions map to the same\n location. "
                                       +"There must be distance between the points "
                                       +"to calculate\n new settings.");
                this.hide();
                String inString = JOptionPane.showInputDialog("How long should the move last?");
                while(totalDuration == 0){
                    try{
                        totalDuration = Double.parseDouble(inString);
                    }catch(Exception e){
                        LenzLogger.log(e.toString());
                    }
                    if(totalDuration < 1)
                        inString = JOptionPane.showInputDialog("Must enter a numeric value of at least 1:");
                }
                cycleDuration = totalDuration * STEPS_PER_SECOND;
                cycleRampTime = (Math.sqrt(cycleDuration*cycleDuration - 4*stepsToTravel) - cycleDuration)/-2;//Derived from kinemetics equations

                double newVelocity = stepsToTravel / cycleDuration;
                double newAcceleration = newVelocity / cycleRampTime;
                newVelocity*=2;
                LenzLogger.log("Final Velocity: " + newVelocity + " Final Acceleration: "
                            + newAcceleration);
                //doubled because in playback mode the encoder scales 
                //the velocity, with the center point being 50%
                timeLapseCamera.setVelocity(roundToNearestWholeNumber(newVelocity));
                timeLapseCamera.setAcceleration(roundToNearestWholeNumber(newAcceleration));
            } catch (Exception e) {
                LenzLogger.log(e.toString());
                String output;
                if((output = e.toString().split(":")[1]) != null)
                    JOptionPane.showMessageDialog(null,
                            output,
                            "Alert", JOptionPane.ERROR_MESSAGE);
                else
                    JOptionPane.showMessageDialog(null,
                            e.toString(),
                            "Alert", JOptionPane.ERROR_MESSAGE);
                return;
            }

            DigUploader.newCameraSettings(timeLapseCamera);
            this.hide();
        });
        t.start();
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.hide();
        DigUploader.setTimeLapseButtonSelected(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private int roundToNearestWholeNumber(double rawValue){
        int x = Math.max((int)(rawValue+.5), 1);//we never want to return a 0
        return x;
    }
    /**
     * @param args the command line arguments
     */
    
    private void setUpListeners(){
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                DigUploader.setTimeLapseButtonSelected(false);
            }

        });
        
        addWindowFocusListener(new WindowFocusListener()
        {
            @Override
            public void windowGainedFocus(WindowEvent we)
            {
                
            }

            @Override
            public void windowLostFocus(WindowEvent we)
            {
                
            }
        });
    }
    private void setLookAndFeel(){
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    LenzLogger.log("Successfully set look and feel of timelapse window.");
                    LenzLogger.log(javax.swing.UIManager.getLookAndFeel().toString());
                    return;
                }
            }
        } catch (ClassNotFoundException | InstantiationException |
                IllegalAccessException |
                javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TimeLapse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        LenzLogger.log("Failed to set timelapse look and feel.");
    }
    
    private CameraSettings timeLapseCamera = null;
    private static final double STEPS_PER_SECOND = 6000;
    private static final int BITSHIFT_CONSTANT = 15;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField accelTimeTextField;
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JFormattedTextField durationTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JComboBox startingPositionComboBox;
    private javax.swing.JComboBox targetPositionComboBox;
    // End of variables declaration//GEN-END:variables
}
